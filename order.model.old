import { Sequelize, Model, DataTypes, Op, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';
import { ConnectionDB } from '../postgres/connectionDB';

const sequelize: Sequelize = ConnectionDB.getDB().getConnection();

export enum StatusOrder {
  Creato = 'creato',
  Completato = 'completato',
  InEsecuzione = 'in esecuzione',
  Fallito = 'fallito'
}


export interface MyJsonObject {
  foodIndex: number;
  food: string;
  quantity: number;
}

export class Order extends Model<InferAttributes<Order>, InferCreationAttributes<Order>> {
  declare uuid: string;
  declare requestOrder: MyJsonObject[];
  declare created_At: number;
  declare created_by: string;
  declare status: StatusOrder;
}

Order.init({
  uuid: {
    type: DataTypes.UUID,
    primaryKey: true,
  },
  requestOrder: {
    type: DataTypes.ARRAY(DataTypes.JSON), // Utilizza JSON per memorizzare gli alimenti per l'ordine
    allowNull: false, 
  },
  created_At:{
    type: DataTypes.DATE,
    allowNull: false,
  },
  created_by: {
    type: DataTypes.STRING,
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM(StatusOrder.Creato, StatusOrder.Completato, StatusOrder.Fallito, StatusOrder.InEsecuzione),
    allowNull: false,
  }

}, { sequelize, tableName: 'orders' });



/*

// Definisco il modello per gli alimenti all'interno della creazione dell'ordine
export class FoodItemOrder extends Model<InferAttributes<FoodItemOrder>, InferCreationAttributes<FoodItemOrder>> {
  declare foodIndex: number;
  declare food: string;
  declare quantity: number;
  declare orderId: string;
}

FoodItemOrder.init({
  foodIndex: {
    type: DataTypes.INTEGER,
    allowNull: false    
  },
  food: {
    type: DataTypes.STRING,
    allowNull: false
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  orderId: {
    type: DataTypes.UUID,
    primaryKey: true
  },
}, { sequelize, tableName: 'fooditemorder' });

export class Cargo extends Model<InferAttributes<Cargo>, InferCreationAttributes<Cargo>> {
  declare food: string;
  declare quantity: number;
  declare index: number;
  declare orderId: string;
}

Cargo.init({
  food: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
  },
  index: {
    type: DataTypes.NUMBER,
    allowNull: false,
  },
  orderId: {
    type: DataTypes.STRING,
    allowNull: false,
  }
}, { sequelize, tableName: 'fooditemorder' });
*/











------------------------------------------------------------------------------------------------------------------------
import { Sequelize, Model, DataTypes, Op, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';
import { ConnectionDB } from '../postgres/connectionDB';

const sequelize: Sequelize = ConnectionDB.getDB().getConnection();



export const Orders = sequelize.define(
  "orders",
  {
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    budget: {
      type: DataTypes.FLOAT,
      allowNull: false,
    }
  },
  {
    modelName: "users",
    timestamps: false,
  }
);

class Product extends Model {}
Product.init({
  title: Sequelize.STRING
}, { sequelize, modelName: 'product' });
class User extends Model {}
User.init({
  firstName: Sequelize.STRING,
  lastName: Sequelize.STRING
}, { sequelize, modelName: 'user' });
class Address extends Model {}
Address.init({
  type: DataTypes.STRING,
  line1: Sequelize.STRING,
  line2: Sequelize.STRING,
  city: Sequelize.STRING,
  state: Sequelize.STRING,
  zip: Sequelize.STRING,
}, { sequelize, modelName: 'address' });

// We save the return values of the association setup calls to use them later
Product.User = Product.belongsTo(User);
User.Addresses = User.hasMany(Address);
// Also works for `hasOne`
return Product.create({
  title: 'Chair',
  user: {
    firstName: 'Mick',
    lastName: 'Broadstone',
    addresses: [{
      type: 'home',
      line1: '100 Main St.',
      city: 'Austin',
      state: 'TX',
      zip: '78704'
    }]
  }
}, {
  include: [{
    association: Product.User,
    include: [ User.Addresses ]
  }]
});